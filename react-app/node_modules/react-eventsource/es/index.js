function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from 'react';
import PropTypes from 'prop-types';
import propIsRequiredIf from 'react-proptype-conditional-require';

var EventSourceHOC = function (_React$Component) {
  _inherits(EventSourceHOC, _React$Component);

  function EventSourceHOC() {
    var _temp, _this, _ret;

    _classCallCheck(this, EventSourceHOC);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      events: []
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  EventSourceHOC.prototype.componentDidMount = function componentDidMount() {
    var _this2 = this;

    // connect to the EventSource
    this.source = this.props.source ? this.props.source : new EventSource(this.props.url);
    var cb = function cb(message) {
      _this2.setState(function (prevState) {
        var newEvents = prevState.events.concat(message.data);
        return {
          events: newEvents
        };
      });
    };
    this.props.types.forEach(function (type) {
      _this2.source.addEventListener(type, cb, false);
    });
    if (this.props.onEventSourceError) {
      this.source.onerror = this.props.onEventSourceError;
    }
  };

  EventSourceHOC.prototype.componentWillUnmount = function componentWillUnmount() {
    this.source.close();
  };

  EventSourceHOC.prototype.render = function render() {
    return React.createElement(
      'div',
      null,
      this.props.children(this.state.events)
    );
  };

  return EventSourceHOC;
}(React.Component);

process.env.NODE_ENV !== "production" ? EventSourceHOC.propTypes = {
  url: propIsRequiredIf(PropTypes.string, function (props) {
    return !props.hasOwnProperty('source');
  }),
  source: propIsRequiredIf(PropTypes.object, function (props) {
    return !props.hasOwnProperty('url');
  }),
  onEventSourceError: PropTypes.func,
  types: PropTypes.array,
  children: PropTypes.func.isRequired
} : void 0;

EventSourceHOC.defaultProps = {
  types: ['message']
};

export default EventSourceHOC;